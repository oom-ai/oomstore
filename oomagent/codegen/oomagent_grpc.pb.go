// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package codegen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OomAgentClient is the client API for OomAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OomAgentClient interface {
	OnlineGet(ctx context.Context, in *OnlineGetRequest, opts ...grpc.CallOption) (*OnlineGetResponse, error)
	OnlineMultiGet(ctx context.Context, in *OnlineMultiGetRequest, opts ...grpc.CallOption) (*OnlineMultiGetResponse, error)
	Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error)
	ChannelImport(ctx context.Context, opts ...grpc.CallOption) (OomAgent_ChannelImportClient, error)
	Import(ctx context.Context, in *ImportRequest, opts ...grpc.CallOption) (*ImportResponse, error)
	ChannelJoin(ctx context.Context, opts ...grpc.CallOption) (OomAgent_ChannelJoinClient, error)
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	ChannelExport(ctx context.Context, in *ChannelExportRequest, opts ...grpc.CallOption) (OomAgent_ChannelExportClient, error)
	Export(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (*ExportResponse, error)
}

type oomAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewOomAgentClient(cc grpc.ClientConnInterface) OomAgentClient {
	return &oomAgentClient{cc}
}

func (c *oomAgentClient) OnlineGet(ctx context.Context, in *OnlineGetRequest, opts ...grpc.CallOption) (*OnlineGetResponse, error) {
	out := new(OnlineGetResponse)
	err := c.cc.Invoke(ctx, "/oomagent.OomAgent/OnlineGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oomAgentClient) OnlineMultiGet(ctx context.Context, in *OnlineMultiGetRequest, opts ...grpc.CallOption) (*OnlineMultiGetResponse, error) {
	out := new(OnlineMultiGetResponse)
	err := c.cc.Invoke(ctx, "/oomagent.OomAgent/OnlineMultiGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oomAgentClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, "/oomagent.OomAgent/Sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oomAgentClient) ChannelImport(ctx context.Context, opts ...grpc.CallOption) (OomAgent_ChannelImportClient, error) {
	stream, err := c.cc.NewStream(ctx, &OomAgent_ServiceDesc.Streams[0], "/oomagent.OomAgent/ChannelImport", opts...)
	if err != nil {
		return nil, err
	}
	x := &oomAgentChannelImportClient{stream}
	return x, nil
}

type OomAgent_ChannelImportClient interface {
	Send(*ChannelImportRequest) error
	CloseAndRecv() (*ImportResponse, error)
	grpc.ClientStream
}

type oomAgentChannelImportClient struct {
	grpc.ClientStream
}

func (x *oomAgentChannelImportClient) Send(m *ChannelImportRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *oomAgentChannelImportClient) CloseAndRecv() (*ImportResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ImportResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *oomAgentClient) Import(ctx context.Context, in *ImportRequest, opts ...grpc.CallOption) (*ImportResponse, error) {
	out := new(ImportResponse)
	err := c.cc.Invoke(ctx, "/oomagent.OomAgent/Import", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oomAgentClient) ChannelJoin(ctx context.Context, opts ...grpc.CallOption) (OomAgent_ChannelJoinClient, error) {
	stream, err := c.cc.NewStream(ctx, &OomAgent_ServiceDesc.Streams[1], "/oomagent.OomAgent/ChannelJoin", opts...)
	if err != nil {
		return nil, err
	}
	x := &oomAgentChannelJoinClient{stream}
	return x, nil
}

type OomAgent_ChannelJoinClient interface {
	Send(*ChannelJoinRequest) error
	Recv() (*ChannelJoinResponse, error)
	grpc.ClientStream
}

type oomAgentChannelJoinClient struct {
	grpc.ClientStream
}

func (x *oomAgentChannelJoinClient) Send(m *ChannelJoinRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *oomAgentChannelJoinClient) Recv() (*ChannelJoinResponse, error) {
	m := new(ChannelJoinResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *oomAgentClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, "/oomagent.OomAgent/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oomAgentClient) ChannelExport(ctx context.Context, in *ChannelExportRequest, opts ...grpc.CallOption) (OomAgent_ChannelExportClient, error) {
	stream, err := c.cc.NewStream(ctx, &OomAgent_ServiceDesc.Streams[2], "/oomagent.OomAgent/ChannelExport", opts...)
	if err != nil {
		return nil, err
	}
	x := &oomAgentChannelExportClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OomAgent_ChannelExportClient interface {
	Recv() (*ChannelExportResponse, error)
	grpc.ClientStream
}

type oomAgentChannelExportClient struct {
	grpc.ClientStream
}

func (x *oomAgentChannelExportClient) Recv() (*ChannelExportResponse, error) {
	m := new(ChannelExportResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *oomAgentClient) Export(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (*ExportResponse, error) {
	out := new(ExportResponse)
	err := c.cc.Invoke(ctx, "/oomagent.OomAgent/Export", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OomAgentServer is the server API for OomAgent service.
// All implementations must embed UnimplementedOomAgentServer
// for forward compatibility
type OomAgentServer interface {
	OnlineGet(context.Context, *OnlineGetRequest) (*OnlineGetResponse, error)
	OnlineMultiGet(context.Context, *OnlineMultiGetRequest) (*OnlineMultiGetResponse, error)
	Sync(context.Context, *SyncRequest) (*SyncResponse, error)
	ChannelImport(OomAgent_ChannelImportServer) error
	Import(context.Context, *ImportRequest) (*ImportResponse, error)
	ChannelJoin(OomAgent_ChannelJoinServer) error
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
	ChannelExport(*ChannelExportRequest, OomAgent_ChannelExportServer) error
	Export(context.Context, *ExportRequest) (*ExportResponse, error)
	mustEmbedUnimplementedOomAgentServer()
}

// UnimplementedOomAgentServer must be embedded to have forward compatible implementations.
type UnimplementedOomAgentServer struct {
}

func (UnimplementedOomAgentServer) OnlineGet(context.Context, *OnlineGetRequest) (*OnlineGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnlineGet not implemented")
}
func (UnimplementedOomAgentServer) OnlineMultiGet(context.Context, *OnlineMultiGetRequest) (*OnlineMultiGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnlineMultiGet not implemented")
}
func (UnimplementedOomAgentServer) Sync(context.Context, *SyncRequest) (*SyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedOomAgentServer) ChannelImport(OomAgent_ChannelImportServer) error {
	return status.Errorf(codes.Unimplemented, "method ChannelImport not implemented")
}
func (UnimplementedOomAgentServer) Import(context.Context, *ImportRequest) (*ImportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Import not implemented")
}
func (UnimplementedOomAgentServer) ChannelJoin(OomAgent_ChannelJoinServer) error {
	return status.Errorf(codes.Unimplemented, "method ChannelJoin not implemented")
}
func (UnimplementedOomAgentServer) Join(context.Context, *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedOomAgentServer) ChannelExport(*ChannelExportRequest, OomAgent_ChannelExportServer) error {
	return status.Errorf(codes.Unimplemented, "method ChannelExport not implemented")
}
func (UnimplementedOomAgentServer) Export(context.Context, *ExportRequest) (*ExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Export not implemented")
}
func (UnimplementedOomAgentServer) mustEmbedUnimplementedOomAgentServer() {}

// UnsafeOomAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OomAgentServer will
// result in compilation errors.
type UnsafeOomAgentServer interface {
	mustEmbedUnimplementedOomAgentServer()
}

func RegisterOomAgentServer(s grpc.ServiceRegistrar, srv OomAgentServer) {
	s.RegisterService(&OomAgent_ServiceDesc, srv)
}

func _OomAgent_OnlineGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnlineGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OomAgentServer).OnlineGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oomagent.OomAgent/OnlineGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OomAgentServer).OnlineGet(ctx, req.(*OnlineGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OomAgent_OnlineMultiGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnlineMultiGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OomAgentServer).OnlineMultiGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oomagent.OomAgent/OnlineMultiGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OomAgentServer).OnlineMultiGet(ctx, req.(*OnlineMultiGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OomAgent_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OomAgentServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oomagent.OomAgent/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OomAgentServer).Sync(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OomAgent_ChannelImport_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OomAgentServer).ChannelImport(&oomAgentChannelImportServer{stream})
}

type OomAgent_ChannelImportServer interface {
	SendAndClose(*ImportResponse) error
	Recv() (*ChannelImportRequest, error)
	grpc.ServerStream
}

type oomAgentChannelImportServer struct {
	grpc.ServerStream
}

func (x *oomAgentChannelImportServer) SendAndClose(m *ImportResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *oomAgentChannelImportServer) Recv() (*ChannelImportRequest, error) {
	m := new(ChannelImportRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _OomAgent_Import_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OomAgentServer).Import(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oomagent.OomAgent/Import",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OomAgentServer).Import(ctx, req.(*ImportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OomAgent_ChannelJoin_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OomAgentServer).ChannelJoin(&oomAgentChannelJoinServer{stream})
}

type OomAgent_ChannelJoinServer interface {
	Send(*ChannelJoinResponse) error
	Recv() (*ChannelJoinRequest, error)
	grpc.ServerStream
}

type oomAgentChannelJoinServer struct {
	grpc.ServerStream
}

func (x *oomAgentChannelJoinServer) Send(m *ChannelJoinResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *oomAgentChannelJoinServer) Recv() (*ChannelJoinRequest, error) {
	m := new(ChannelJoinRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _OomAgent_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OomAgentServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oomagent.OomAgent/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OomAgentServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OomAgent_ChannelExport_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChannelExportRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OomAgentServer).ChannelExport(m, &oomAgentChannelExportServer{stream})
}

type OomAgent_ChannelExportServer interface {
	Send(*ChannelExportResponse) error
	grpc.ServerStream
}

type oomAgentChannelExportServer struct {
	grpc.ServerStream
}

func (x *oomAgentChannelExportServer) Send(m *ChannelExportResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _OomAgent_Export_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OomAgentServer).Export(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oomagent.OomAgent/Export",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OomAgentServer).Export(ctx, req.(*ExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OomAgent_ServiceDesc is the grpc.ServiceDesc for OomAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OomAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "oomagent.OomAgent",
	HandlerType: (*OomAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnlineGet",
			Handler:    _OomAgent_OnlineGet_Handler,
		},
		{
			MethodName: "OnlineMultiGet",
			Handler:    _OomAgent_OnlineMultiGet_Handler,
		},
		{
			MethodName: "Sync",
			Handler:    _OomAgent_Sync_Handler,
		},
		{
			MethodName: "Import",
			Handler:    _OomAgent_Import_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _OomAgent_Join_Handler,
		},
		{
			MethodName: "Export",
			Handler:    _OomAgent_Export_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ChannelImport",
			Handler:       _OomAgent_ChannelImport_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ChannelJoin",
			Handler:       _OomAgent_ChannelJoin_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ChannelExport",
			Handler:       _OomAgent_ChannelExport_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "oomagent.proto",
}
