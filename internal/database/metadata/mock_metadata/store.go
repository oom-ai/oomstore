// Code generated by MockGen. DO NOT EDIT.
// Source: oomstore/internal/database/metadata/store.go

// Package mock_metadata is a generated GoMock package.
package mock_metadata

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
	metadata "github.com/oom-ai/oomstore/internal/database/metadata"
	types "github.com/oom-ai/oomstore/pkg/oomstore/types"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// BuildRevisionRanges mocks base method.
func (m *MockStore) BuildRevisionRanges(ctx context.Context, groupName string) ([]*types.RevisionRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildRevisionRanges", ctx, groupName)
	ret0, _ := ret[0].([]*types.RevisionRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildRevisionRanges indicates an expected call of BuildRevisionRanges.
func (mr *MockStoreMockRecorder) BuildRevisionRanges(ctx, groupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildRevisionRanges", reflect.TypeOf((*MockStore)(nil).BuildRevisionRanges), ctx, groupName)
}

// Close mocks base method.
func (m *MockStore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStore)(nil).Close))
}

// CreateEntity mocks base method.
func (m *MockStore) CreateEntity(ctx context.Context, opt types.CreateEntityOpt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntity", ctx, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEntity indicates an expected call of CreateEntity.
func (mr *MockStoreMockRecorder) CreateEntity(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntity", reflect.TypeOf((*MockStore)(nil).CreateEntity), ctx, opt)
}

// CreateFeature mocks base method.
func (m *MockStore) CreateFeature(ctx context.Context, opt metadata.CreateFeatureOpt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFeature", ctx, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFeature indicates an expected call of CreateFeature.
func (mr *MockStoreMockRecorder) CreateFeature(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFeature", reflect.TypeOf((*MockStore)(nil).CreateFeature), ctx, opt)
}

// CreateFeatureGroup mocks base method.
func (m *MockStore) CreateFeatureGroup(ctx context.Context, opt metadata.CreateFeatureGroupOpt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFeatureGroup", ctx, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFeatureGroup indicates an expected call of CreateFeatureGroup.
func (mr *MockStoreMockRecorder) CreateFeatureGroup(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFeatureGroup", reflect.TypeOf((*MockStore)(nil).CreateFeatureGroup), ctx, opt)
}

// CreateRevision mocks base method.
func (m *MockStore) CreateRevision(ctx context.Context, opt metadata.CreateRevisionOpt) (*types.Revision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRevision", ctx, opt)
	ret0, _ := ret[0].(*types.Revision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRevision indicates an expected call of CreateRevision.
func (mr *MockStoreMockRecorder) CreateRevision(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRevision", reflect.TypeOf((*MockStore)(nil).CreateRevision), ctx, opt)
}

// GetEntity mocks base method.
func (m *MockStore) GetEntity(ctx context.Context, name string) (*types.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntity", ctx, name)
	ret0, _ := ret[0].(*types.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntity indicates an expected call of GetEntity.
func (mr *MockStoreMockRecorder) GetEntity(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntity", reflect.TypeOf((*MockStore)(nil).GetEntity), ctx, name)
}

// GetFeature mocks base method.
func (m *MockStore) GetFeature(ctx context.Context, featureName string) (*types.Feature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeature", ctx, featureName)
	ret0, _ := ret[0].(*types.Feature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeature indicates an expected call of GetFeature.
func (mr *MockStoreMockRecorder) GetFeature(ctx, featureName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeature", reflect.TypeOf((*MockStore)(nil).GetFeature), ctx, featureName)
}

// GetFeatureGroup mocks base method.
func (m *MockStore) GetFeatureGroup(ctx context.Context, groupName string) (*types.FeatureGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeatureGroup", ctx, groupName)
	ret0, _ := ret[0].(*types.FeatureGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeatureGroup indicates an expected call of GetFeatureGroup.
func (mr *MockStoreMockRecorder) GetFeatureGroup(ctx, groupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeatureGroup", reflect.TypeOf((*MockStore)(nil).GetFeatureGroup), ctx, groupName)
}

// GetLatestRevision mocks base method.
func (m *MockStore) GetLatestRevision(ctx context.Context, groupName string) (*types.Revision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestRevision", ctx, groupName)
	ret0, _ := ret[0].(*types.Revision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestRevision indicates an expected call of GetLatestRevision.
func (mr *MockStoreMockRecorder) GetLatestRevision(ctx, groupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestRevision", reflect.TypeOf((*MockStore)(nil).GetLatestRevision), ctx, groupName)
}

// GetRevision mocks base method.
func (m *MockStore) GetRevision(ctx context.Context, opt metadata.GetRevisionOpt) (*types.Revision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRevision", ctx, opt)
	ret0, _ := ret[0].(*types.Revision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRevision indicates an expected call of GetRevision.
func (mr *MockStoreMockRecorder) GetRevision(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRevision", reflect.TypeOf((*MockStore)(nil).GetRevision), ctx, opt)
}

// ListEntity mocks base method.
func (m *MockStore) ListEntity(ctx context.Context) ([]*types.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEntity", ctx)
	ret0, _ := ret[0].([]*types.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEntity indicates an expected call of ListEntity.
func (mr *MockStoreMockRecorder) ListEntity(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntity", reflect.TypeOf((*MockStore)(nil).ListEntity), ctx)
}

// ListFeature mocks base method.
func (m *MockStore) ListFeature(ctx context.Context, opt types.ListFeatureOpt) (types.FeatureList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFeature", ctx, opt)
	ret0, _ := ret[0].(types.FeatureList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFeature indicates an expected call of ListFeature.
func (mr *MockStoreMockRecorder) ListFeature(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFeature", reflect.TypeOf((*MockStore)(nil).ListFeature), ctx, opt)
}

// ListFeatureGroup mocks base method.
func (m *MockStore) ListFeatureGroup(ctx context.Context, entityName *string) ([]*types.FeatureGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFeatureGroup", ctx, entityName)
	ret0, _ := ret[0].([]*types.FeatureGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFeatureGroup indicates an expected call of ListFeatureGroup.
func (mr *MockStoreMockRecorder) ListFeatureGroup(ctx, entityName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFeatureGroup", reflect.TypeOf((*MockStore)(nil).ListFeatureGroup), ctx, entityName)
}

// ListRevision mocks base method.
func (m *MockStore) ListRevision(ctx context.Context, opt metadata.ListRevisionOpt) ([]*types.Revision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRevision", ctx, opt)
	ret0, _ := ret[0].([]*types.Revision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRevision indicates an expected call of ListRevision.
func (mr *MockStoreMockRecorder) ListRevision(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRevision", reflect.TypeOf((*MockStore)(nil).ListRevision), ctx, opt)
}

// UpdateEntity mocks base method.
func (m *MockStore) UpdateEntity(ctx context.Context, opt types.UpdateEntityOpt) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEntity", ctx, opt)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEntity indicates an expected call of UpdateEntity.
func (mr *MockStoreMockRecorder) UpdateEntity(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEntity", reflect.TypeOf((*MockStore)(nil).UpdateEntity), ctx, opt)
}

// UpdateFeature mocks base method.
func (m *MockStore) UpdateFeature(ctx context.Context, opt types.UpdateFeatureOpt) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFeature", ctx, opt)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFeature indicates an expected call of UpdateFeature.
func (mr *MockStoreMockRecorder) UpdateFeature(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFeature", reflect.TypeOf((*MockStore)(nil).UpdateFeature), ctx, opt)
}

// UpdateFeatureGroup mocks base method.
func (m *MockStore) UpdateFeatureGroup(ctx context.Context, opt types.UpdateFeatureGroupOpt) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFeatureGroup", ctx, opt)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFeatureGroup indicates an expected call of UpdateFeatureGroup.
func (mr *MockStoreMockRecorder) UpdateFeatureGroup(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFeatureGroup", reflect.TypeOf((*MockStore)(nil).UpdateFeatureGroup), ctx, opt)
}

// UpdateRevision mocks base method.
func (m *MockStore) UpdateRevision(ctx context.Context, opt metadata.UpdateRevisionOpt) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRevision", ctx, opt)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRevision indicates an expected call of UpdateRevision.
func (mr *MockStoreMockRecorder) UpdateRevision(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRevision", reflect.TypeOf((*MockStore)(nil).UpdateRevision), ctx, opt)
}

// WithTransaction mocks base method.
func (m *MockStore) WithTransaction(ctx context.Context, fn metadata.TxFn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTransaction", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTransaction indicates an expected call of WithTransaction.
func (mr *MockStoreMockRecorder) WithTransaction(ctx, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransaction", reflect.TypeOf((*MockStore)(nil).WithTransaction), ctx, fn)
}

// MockExtContext is a mock of ExtContext interface.
type MockExtContext struct {
	ctrl     *gomock.Controller
	recorder *MockExtContextMockRecorder
}

// MockExtContextMockRecorder is the mock recorder for MockExtContext.
type MockExtContextMockRecorder struct {
	mock *MockExtContext
}

// NewMockExtContext creates a new mock instance.
func NewMockExtContext(ctrl *gomock.Controller) *MockExtContext {
	mock := &MockExtContext{ctrl: ctrl}
	mock.recorder = &MockExtContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtContext) EXPECT() *MockExtContextMockRecorder {
	return m.recorder
}

// BindNamed mocks base method.
func (m *MockExtContext) BindNamed(arg0 string, arg1 interface{}) (string, []interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindNamed", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BindNamed indicates an expected call of BindNamed.
func (mr *MockExtContextMockRecorder) BindNamed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindNamed", reflect.TypeOf((*MockExtContext)(nil).BindNamed), arg0, arg1)
}

// DriverName mocks base method.
func (m *MockExtContext) DriverName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DriverName")
	ret0, _ := ret[0].(string)
	return ret0
}

// DriverName indicates an expected call of DriverName.
func (mr *MockExtContextMockRecorder) DriverName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DriverName", reflect.TypeOf((*MockExtContext)(nil).DriverName))
}

// ExecContext mocks base method.
func (m *MockExtContext) ExecContext(ctx context.Context, query string, args ...interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockExtContextMockRecorder) ExecContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockExtContext)(nil).ExecContext), varargs...)
}

// GetContext mocks base method.
func (m *MockExtContext) GetContext(ctx context.Context, dest interface{}, query string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, dest, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockExtContextMockRecorder) GetContext(ctx, dest, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, dest, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockExtContext)(nil).GetContext), varargs...)
}

// QueryContext mocks base method.
func (m *MockExtContext) QueryContext(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContext", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext.
func (mr *MockExtContextMockRecorder) QueryContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockExtContext)(nil).QueryContext), varargs...)
}

// QueryRowxContext mocks base method.
func (m *MockExtContext) QueryRowxContext(ctx context.Context, query string, args ...interface{}) *sqlx.Row {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowxContext", varargs...)
	ret0, _ := ret[0].(*sqlx.Row)
	return ret0
}

// QueryRowxContext indicates an expected call of QueryRowxContext.
func (mr *MockExtContextMockRecorder) QueryRowxContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowxContext", reflect.TypeOf((*MockExtContext)(nil).QueryRowxContext), varargs...)
}

// QueryxContext mocks base method.
func (m *MockExtContext) QueryxContext(ctx context.Context, query string, args ...interface{}) (*sqlx.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryxContext", varargs...)
	ret0, _ := ret[0].(*sqlx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryxContext indicates an expected call of QueryxContext.
func (mr *MockExtContextMockRecorder) QueryxContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryxContext", reflect.TypeOf((*MockExtContext)(nil).QueryxContext), varargs...)
}

// Rebind mocks base method.
func (m *MockExtContext) Rebind(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rebind", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Rebind indicates an expected call of Rebind.
func (mr *MockExtContextMockRecorder) Rebind(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rebind", reflect.TypeOf((*MockExtContext)(nil).Rebind), arg0)
}

// SelectContext mocks base method.
func (m *MockExtContext) SelectContext(ctx context.Context, dest interface{}, query string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, dest, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SelectContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectContext indicates an expected call of SelectContext.
func (mr *MockExtContextMockRecorder) SelectContext(ctx, dest, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, dest, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectContext", reflect.TypeOf((*MockExtContext)(nil).SelectContext), varargs...)
}
