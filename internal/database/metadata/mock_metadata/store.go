// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/jinghan/source/jinghancc/oom-ai/oomstore/internal/database/metadata/store.go

// Package mock_metadata is a generated GoMock package.
package mock_metadata

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	metadata "github.com/oom-ai/oomstore/internal/database/metadata"
	types "github.com/oom-ai/oomstore/pkg/oomstore/types"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CacheGetEntity mocks base method.
func (m *MockStore) CacheGetEntity(ctx context.Context, id int) (*types.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheGetEntity", ctx, id)
	ret0, _ := ret[0].(*types.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CacheGetEntity indicates an expected call of CacheGetEntity.
func (mr *MockStoreMockRecorder) CacheGetEntity(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheGetEntity", reflect.TypeOf((*MockStore)(nil).CacheGetEntity), ctx, id)
}

// CacheGetEntityByName mocks base method.
func (m *MockStore) CacheGetEntityByName(ctx context.Context, name string) (*types.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheGetEntityByName", ctx, name)
	ret0, _ := ret[0].(*types.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CacheGetEntityByName indicates an expected call of CacheGetEntityByName.
func (mr *MockStoreMockRecorder) CacheGetEntityByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheGetEntityByName", reflect.TypeOf((*MockStore)(nil).CacheGetEntityByName), ctx, name)
}

// CacheGetFeature mocks base method.
func (m *MockStore) CacheGetFeature(ctx context.Context, id int) (*types.Feature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheGetFeature", ctx, id)
	ret0, _ := ret[0].(*types.Feature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CacheGetFeature indicates an expected call of CacheGetFeature.
func (mr *MockStoreMockRecorder) CacheGetFeature(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheGetFeature", reflect.TypeOf((*MockStore)(nil).CacheGetFeature), ctx, id)
}

// CacheGetFeatureByName mocks base method.
func (m *MockStore) CacheGetFeatureByName(ctx context.Context, name string) (*types.Feature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheGetFeatureByName", ctx, name)
	ret0, _ := ret[0].(*types.Feature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CacheGetFeatureByName indicates an expected call of CacheGetFeatureByName.
func (mr *MockStoreMockRecorder) CacheGetFeatureByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheGetFeatureByName", reflect.TypeOf((*MockStore)(nil).CacheGetFeatureByName), ctx, name)
}

// CacheGetGroup mocks base method.
func (m *MockStore) CacheGetGroup(ctx context.Context, id int) (*types.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheGetGroup", ctx, id)
	ret0, _ := ret[0].(*types.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CacheGetGroup indicates an expected call of CacheGetGroup.
func (mr *MockStoreMockRecorder) CacheGetGroup(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheGetGroup", reflect.TypeOf((*MockStore)(nil).CacheGetGroup), ctx, id)
}

// CacheGetGroupByName mocks base method.
func (m *MockStore) CacheGetGroupByName(ctx context.Context, name string) (*types.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheGetGroupByName", ctx, name)
	ret0, _ := ret[0].(*types.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CacheGetGroupByName indicates an expected call of CacheGetGroupByName.
func (mr *MockStoreMockRecorder) CacheGetGroupByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheGetGroupByName", reflect.TypeOf((*MockStore)(nil).CacheGetGroupByName), ctx, name)
}

// CacheGetRevision mocks base method.
func (m *MockStore) CacheGetRevision(ctx context.Context, id int) (*types.Revision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheGetRevision", ctx, id)
	ret0, _ := ret[0].(*types.Revision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CacheGetRevision indicates an expected call of CacheGetRevision.
func (mr *MockStoreMockRecorder) CacheGetRevision(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheGetRevision", reflect.TypeOf((*MockStore)(nil).CacheGetRevision), ctx, id)
}

// CacheGetRevisionBy mocks base method.
func (m *MockStore) CacheGetRevisionBy(ctx context.Context, groupID int, revision int64) (*types.Revision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheGetRevisionBy", ctx, groupID, revision)
	ret0, _ := ret[0].(*types.Revision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CacheGetRevisionBy indicates an expected call of CacheGetRevisionBy.
func (mr *MockStoreMockRecorder) CacheGetRevisionBy(ctx, groupID, revision interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheGetRevisionBy", reflect.TypeOf((*MockStore)(nil).CacheGetRevisionBy), ctx, groupID, revision)
}

// CacheListEntity mocks base method.
func (m *MockStore) CacheListEntity(ctx context.Context) types.EntityList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheListEntity", ctx)
	ret0, _ := ret[0].(types.EntityList)
	return ret0
}

// CacheListEntity indicates an expected call of CacheListEntity.
func (mr *MockStoreMockRecorder) CacheListEntity(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheListEntity", reflect.TypeOf((*MockStore)(nil).CacheListEntity), ctx)
}

// CacheListFeature mocks base method.
func (m *MockStore) CacheListFeature(ctx context.Context, opt metadata.ListFeatureOpt) types.FeatureList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheListFeature", ctx, opt)
	ret0, _ := ret[0].(types.FeatureList)
	return ret0
}

// CacheListFeature indicates an expected call of CacheListFeature.
func (mr *MockStoreMockRecorder) CacheListFeature(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheListFeature", reflect.TypeOf((*MockStore)(nil).CacheListFeature), ctx, opt)
}

// CacheListGroup mocks base method.
func (m *MockStore) CacheListGroup(ctx context.Context, entityID *int) types.GroupList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheListGroup", ctx, entityID)
	ret0, _ := ret[0].(types.GroupList)
	return ret0
}

// CacheListGroup indicates an expected call of CacheListGroup.
func (mr *MockStoreMockRecorder) CacheListGroup(ctx, entityID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheListGroup", reflect.TypeOf((*MockStore)(nil).CacheListGroup), ctx, entityID)
}

// CacheListRevision mocks base method.
func (m *MockStore) CacheListRevision(ctx context.Context, groupID *int) types.RevisionList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheListRevision", ctx, groupID)
	ret0, _ := ret[0].(types.RevisionList)
	return ret0
}

// CacheListRevision indicates an expected call of CacheListRevision.
func (mr *MockStoreMockRecorder) CacheListRevision(ctx, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheListRevision", reflect.TypeOf((*MockStore)(nil).CacheListRevision), ctx, groupID)
}

// Close mocks base method.
func (m *MockStore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStore)(nil).Close))
}

// CreateEntity mocks base method.
func (m *MockStore) CreateEntity(ctx context.Context, opt metadata.CreateEntityOpt) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntity", ctx, opt)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEntity indicates an expected call of CreateEntity.
func (mr *MockStoreMockRecorder) CreateEntity(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntity", reflect.TypeOf((*MockStore)(nil).CreateEntity), ctx, opt)
}

// CreateFeature mocks base method.
func (m *MockStore) CreateFeature(ctx context.Context, opt metadata.CreateFeatureOpt) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFeature", ctx, opt)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFeature indicates an expected call of CreateFeature.
func (mr *MockStoreMockRecorder) CreateFeature(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFeature", reflect.TypeOf((*MockStore)(nil).CreateFeature), ctx, opt)
}

// CreateGroup mocks base method.
func (m *MockStore) CreateGroup(ctx context.Context, opt metadata.CreateGroupOpt) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", ctx, opt)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockStoreMockRecorder) CreateGroup(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockStore)(nil).CreateGroup), ctx, opt)
}

// CreateRevision mocks base method.
func (m *MockStore) CreateRevision(ctx context.Context, opt metadata.CreateRevisionOpt) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRevision", ctx, opt)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateRevision indicates an expected call of CreateRevision.
func (mr *MockStoreMockRecorder) CreateRevision(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRevision", reflect.TypeOf((*MockStore)(nil).CreateRevision), ctx, opt)
}

// Refresh mocks base method.
func (m *MockStore) Refresh() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh")
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh.
func (mr *MockStoreMockRecorder) Refresh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockStore)(nil).Refresh))
}

// UpdateEntity mocks base method.
func (m *MockStore) UpdateEntity(ctx context.Context, opt metadata.UpdateEntityOpt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEntity", ctx, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEntity indicates an expected call of UpdateEntity.
func (mr *MockStoreMockRecorder) UpdateEntity(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEntity", reflect.TypeOf((*MockStore)(nil).UpdateEntity), ctx, opt)
}

// UpdateFeature mocks base method.
func (m *MockStore) UpdateFeature(ctx context.Context, opt metadata.UpdateFeatureOpt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFeature", ctx, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFeature indicates an expected call of UpdateFeature.
func (mr *MockStoreMockRecorder) UpdateFeature(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFeature", reflect.TypeOf((*MockStore)(nil).UpdateFeature), ctx, opt)
}

// UpdateGroup mocks base method.
func (m *MockStore) UpdateGroup(ctx context.Context, opt metadata.UpdateGroupOpt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroup", ctx, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGroup indicates an expected call of UpdateGroup.
func (mr *MockStoreMockRecorder) UpdateGroup(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroup", reflect.TypeOf((*MockStore)(nil).UpdateGroup), ctx, opt)
}

// UpdateRevision mocks base method.
func (m *MockStore) UpdateRevision(ctx context.Context, opt metadata.UpdateRevisionOpt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRevision", ctx, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRevision indicates an expected call of UpdateRevision.
func (mr *MockStoreMockRecorder) UpdateRevision(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRevision", reflect.TypeOf((*MockStore)(nil).UpdateRevision), ctx, opt)
}

// WithTransaction mocks base method.
func (m *MockStore) WithTransaction(ctx context.Context, fn func(context.Context, metadata.WriteStore) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTransaction", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTransaction indicates an expected call of WithTransaction.
func (mr *MockStoreMockRecorder) WithTransaction(ctx, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransaction", reflect.TypeOf((*MockStore)(nil).WithTransaction), ctx, fn)
}

// MockReadStore is a mock of ReadStore interface.
type MockReadStore struct {
	ctrl     *gomock.Controller
	recorder *MockReadStoreMockRecorder
}

// MockReadStoreMockRecorder is the mock recorder for MockReadStore.
type MockReadStoreMockRecorder struct {
	mock *MockReadStore
}

// NewMockReadStore creates a new mock instance.
func NewMockReadStore(ctrl *gomock.Controller) *MockReadStore {
	mock := &MockReadStore{ctrl: ctrl}
	mock.recorder = &MockReadStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadStore) EXPECT() *MockReadStoreMockRecorder {
	return m.recorder
}

// CacheGetEntity mocks base method.
func (m *MockReadStore) CacheGetEntity(ctx context.Context, id int) (*types.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheGetEntity", ctx, id)
	ret0, _ := ret[0].(*types.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CacheGetEntity indicates an expected call of CacheGetEntity.
func (mr *MockReadStoreMockRecorder) CacheGetEntity(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheGetEntity", reflect.TypeOf((*MockReadStore)(nil).CacheGetEntity), ctx, id)
}

// CacheGetEntityByName mocks base method.
func (m *MockReadStore) CacheGetEntityByName(ctx context.Context, name string) (*types.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheGetEntityByName", ctx, name)
	ret0, _ := ret[0].(*types.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CacheGetEntityByName indicates an expected call of CacheGetEntityByName.
func (mr *MockReadStoreMockRecorder) CacheGetEntityByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheGetEntityByName", reflect.TypeOf((*MockReadStore)(nil).CacheGetEntityByName), ctx, name)
}

// CacheGetFeature mocks base method.
func (m *MockReadStore) CacheGetFeature(ctx context.Context, id int) (*types.Feature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheGetFeature", ctx, id)
	ret0, _ := ret[0].(*types.Feature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CacheGetFeature indicates an expected call of CacheGetFeature.
func (mr *MockReadStoreMockRecorder) CacheGetFeature(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheGetFeature", reflect.TypeOf((*MockReadStore)(nil).CacheGetFeature), ctx, id)
}

// CacheGetFeatureByName mocks base method.
func (m *MockReadStore) CacheGetFeatureByName(ctx context.Context, name string) (*types.Feature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheGetFeatureByName", ctx, name)
	ret0, _ := ret[0].(*types.Feature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CacheGetFeatureByName indicates an expected call of CacheGetFeatureByName.
func (mr *MockReadStoreMockRecorder) CacheGetFeatureByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheGetFeatureByName", reflect.TypeOf((*MockReadStore)(nil).CacheGetFeatureByName), ctx, name)
}

// CacheGetGroup mocks base method.
func (m *MockReadStore) CacheGetGroup(ctx context.Context, id int) (*types.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheGetGroup", ctx, id)
	ret0, _ := ret[0].(*types.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CacheGetGroup indicates an expected call of CacheGetGroup.
func (mr *MockReadStoreMockRecorder) CacheGetGroup(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheGetGroup", reflect.TypeOf((*MockReadStore)(nil).CacheGetGroup), ctx, id)
}

// CacheGetGroupByName mocks base method.
func (m *MockReadStore) CacheGetGroupByName(ctx context.Context, name string) (*types.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheGetGroupByName", ctx, name)
	ret0, _ := ret[0].(*types.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CacheGetGroupByName indicates an expected call of CacheGetGroupByName.
func (mr *MockReadStoreMockRecorder) CacheGetGroupByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheGetGroupByName", reflect.TypeOf((*MockReadStore)(nil).CacheGetGroupByName), ctx, name)
}

// CacheGetRevision mocks base method.
func (m *MockReadStore) CacheGetRevision(ctx context.Context, id int) (*types.Revision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheGetRevision", ctx, id)
	ret0, _ := ret[0].(*types.Revision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CacheGetRevision indicates an expected call of CacheGetRevision.
func (mr *MockReadStoreMockRecorder) CacheGetRevision(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheGetRevision", reflect.TypeOf((*MockReadStore)(nil).CacheGetRevision), ctx, id)
}

// CacheGetRevisionBy mocks base method.
func (m *MockReadStore) CacheGetRevisionBy(ctx context.Context, groupID int, revision int64) (*types.Revision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheGetRevisionBy", ctx, groupID, revision)
	ret0, _ := ret[0].(*types.Revision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CacheGetRevisionBy indicates an expected call of CacheGetRevisionBy.
func (mr *MockReadStoreMockRecorder) CacheGetRevisionBy(ctx, groupID, revision interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheGetRevisionBy", reflect.TypeOf((*MockReadStore)(nil).CacheGetRevisionBy), ctx, groupID, revision)
}

// CacheListEntity mocks base method.
func (m *MockReadStore) CacheListEntity(ctx context.Context) types.EntityList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheListEntity", ctx)
	ret0, _ := ret[0].(types.EntityList)
	return ret0
}

// CacheListEntity indicates an expected call of CacheListEntity.
func (mr *MockReadStoreMockRecorder) CacheListEntity(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheListEntity", reflect.TypeOf((*MockReadStore)(nil).CacheListEntity), ctx)
}

// CacheListFeature mocks base method.
func (m *MockReadStore) CacheListFeature(ctx context.Context, opt metadata.ListFeatureOpt) types.FeatureList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheListFeature", ctx, opt)
	ret0, _ := ret[0].(types.FeatureList)
	return ret0
}

// CacheListFeature indicates an expected call of CacheListFeature.
func (mr *MockReadStoreMockRecorder) CacheListFeature(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheListFeature", reflect.TypeOf((*MockReadStore)(nil).CacheListFeature), ctx, opt)
}

// CacheListGroup mocks base method.
func (m *MockReadStore) CacheListGroup(ctx context.Context, entityID *int) types.GroupList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheListGroup", ctx, entityID)
	ret0, _ := ret[0].(types.GroupList)
	return ret0
}

// CacheListGroup indicates an expected call of CacheListGroup.
func (mr *MockReadStoreMockRecorder) CacheListGroup(ctx, entityID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheListGroup", reflect.TypeOf((*MockReadStore)(nil).CacheListGroup), ctx, entityID)
}

// CacheListRevision mocks base method.
func (m *MockReadStore) CacheListRevision(ctx context.Context, groupID *int) types.RevisionList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheListRevision", ctx, groupID)
	ret0, _ := ret[0].(types.RevisionList)
	return ret0
}

// CacheListRevision indicates an expected call of CacheListRevision.
func (mr *MockReadStoreMockRecorder) CacheListRevision(ctx, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheListRevision", reflect.TypeOf((*MockReadStore)(nil).CacheListRevision), ctx, groupID)
}

// Refresh mocks base method.
func (m *MockReadStore) Refresh() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh")
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh.
func (mr *MockReadStoreMockRecorder) Refresh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockReadStore)(nil).Refresh))
}

// MockWriteStore is a mock of WriteStore interface.
type MockWriteStore struct {
	ctrl     *gomock.Controller
	recorder *MockWriteStoreMockRecorder
}

// MockWriteStoreMockRecorder is the mock recorder for MockWriteStore.
type MockWriteStoreMockRecorder struct {
	mock *MockWriteStore
}

// NewMockWriteStore creates a new mock instance.
func NewMockWriteStore(ctrl *gomock.Controller) *MockWriteStore {
	mock := &MockWriteStore{ctrl: ctrl}
	mock.recorder = &MockWriteStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriteStore) EXPECT() *MockWriteStoreMockRecorder {
	return m.recorder
}

// CreateEntity mocks base method.
func (m *MockWriteStore) CreateEntity(ctx context.Context, opt metadata.CreateEntityOpt) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntity", ctx, opt)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEntity indicates an expected call of CreateEntity.
func (mr *MockWriteStoreMockRecorder) CreateEntity(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntity", reflect.TypeOf((*MockWriteStore)(nil).CreateEntity), ctx, opt)
}

// CreateFeature mocks base method.
func (m *MockWriteStore) CreateFeature(ctx context.Context, opt metadata.CreateFeatureOpt) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFeature", ctx, opt)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFeature indicates an expected call of CreateFeature.
func (mr *MockWriteStoreMockRecorder) CreateFeature(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFeature", reflect.TypeOf((*MockWriteStore)(nil).CreateFeature), ctx, opt)
}

// CreateGroup mocks base method.
func (m *MockWriteStore) CreateGroup(ctx context.Context, opt metadata.CreateGroupOpt) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", ctx, opt)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockWriteStoreMockRecorder) CreateGroup(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockWriteStore)(nil).CreateGroup), ctx, opt)
}

// CreateRevision mocks base method.
func (m *MockWriteStore) CreateRevision(ctx context.Context, opt metadata.CreateRevisionOpt) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRevision", ctx, opt)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateRevision indicates an expected call of CreateRevision.
func (mr *MockWriteStoreMockRecorder) CreateRevision(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRevision", reflect.TypeOf((*MockWriteStore)(nil).CreateRevision), ctx, opt)
}

// UpdateEntity mocks base method.
func (m *MockWriteStore) UpdateEntity(ctx context.Context, opt metadata.UpdateEntityOpt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEntity", ctx, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEntity indicates an expected call of UpdateEntity.
func (mr *MockWriteStoreMockRecorder) UpdateEntity(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEntity", reflect.TypeOf((*MockWriteStore)(nil).UpdateEntity), ctx, opt)
}

// UpdateFeature mocks base method.
func (m *MockWriteStore) UpdateFeature(ctx context.Context, opt metadata.UpdateFeatureOpt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFeature", ctx, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFeature indicates an expected call of UpdateFeature.
func (mr *MockWriteStoreMockRecorder) UpdateFeature(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFeature", reflect.TypeOf((*MockWriteStore)(nil).UpdateFeature), ctx, opt)
}

// UpdateGroup mocks base method.
func (m *MockWriteStore) UpdateGroup(ctx context.Context, opt metadata.UpdateGroupOpt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroup", ctx, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGroup indicates an expected call of UpdateGroup.
func (mr *MockWriteStoreMockRecorder) UpdateGroup(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroup", reflect.TypeOf((*MockWriteStore)(nil).UpdateGroup), ctx, opt)
}

// UpdateRevision mocks base method.
func (m *MockWriteStore) UpdateRevision(ctx context.Context, opt metadata.UpdateRevisionOpt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRevision", ctx, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRevision indicates an expected call of UpdateRevision.
func (mr *MockWriteStoreMockRecorder) UpdateRevision(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRevision", reflect.TypeOf((*MockWriteStore)(nil).UpdateRevision), ctx, opt)
}

// WithTransaction mocks base method.
func (m *MockWriteStore) WithTransaction(ctx context.Context, fn func(context.Context, metadata.WriteStore) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTransaction", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTransaction indicates an expected call of WithTransaction.
func (mr *MockWriteStoreMockRecorder) WithTransaction(ctx, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransaction", reflect.TypeOf((*MockWriteStore)(nil).WithTransaction), ctx, fn)
}

// MockSqlxContext is a mock of SqlxContext interface.
type MockSqlxContext struct {
	ctrl     *gomock.Controller
	recorder *MockSqlxContextMockRecorder
}

// MockSqlxContextMockRecorder is the mock recorder for MockSqlxContext.
type MockSqlxContextMockRecorder struct {
	mock *MockSqlxContext
}

// NewMockSqlxContext creates a new mock instance.
func NewMockSqlxContext(ctrl *gomock.Controller) *MockSqlxContext {
	mock := &MockSqlxContext{ctrl: ctrl}
	mock.recorder = &MockSqlxContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSqlxContext) EXPECT() *MockSqlxContextMockRecorder {
	return m.recorder
}

// DriverName mocks base method.
func (m *MockSqlxContext) DriverName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DriverName")
	ret0, _ := ret[0].(string)
	return ret0
}

// DriverName indicates an expected call of DriverName.
func (mr *MockSqlxContextMockRecorder) DriverName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DriverName", reflect.TypeOf((*MockSqlxContext)(nil).DriverName))
}

// ExecContext mocks base method.
func (m *MockSqlxContext) ExecContext(ctx context.Context, query string, args ...interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockSqlxContextMockRecorder) ExecContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockSqlxContext)(nil).ExecContext), varargs...)
}

// GetContext mocks base method.
func (m *MockSqlxContext) GetContext(ctx context.Context, dest interface{}, query string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, dest, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockSqlxContextMockRecorder) GetContext(ctx, dest, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, dest, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockSqlxContext)(nil).GetContext), varargs...)
}

// Rebind mocks base method.
func (m *MockSqlxContext) Rebind(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rebind", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Rebind indicates an expected call of Rebind.
func (mr *MockSqlxContextMockRecorder) Rebind(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rebind", reflect.TypeOf((*MockSqlxContext)(nil).Rebind), arg0)
}

// SelectContext mocks base method.
func (m *MockSqlxContext) SelectContext(ctx context.Context, dest interface{}, query string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, dest, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SelectContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectContext indicates an expected call of SelectContext.
func (mr *MockSqlxContextMockRecorder) SelectContext(ctx, dest, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, dest, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectContext", reflect.TypeOf((*MockSqlxContext)(nil).SelectContext), varargs...)
}
